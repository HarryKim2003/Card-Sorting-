/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:253122:
  appc.background(230);
} //_CODE_:window1:253122:

public void frameSpeed_Slider(GCustomSlider source, GEvent event) { //_CODE_:speedSlider:520957:
  println("speed_slider - GCustomSlider >> GEvent." + event + " @ " + millis());
  frameAddition = speedSlider.getValueI();
} //_CODE_:speedSlider:520957:

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:textfield1:587726:
  println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:textfield1:587726:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:Sorting_Algorithms:565240:
  println("Sorting_Algorithms - GDropList >> GEvent." + event + " @ " + millis());

  choice = Sorting_Algorithms.getSelectedText();

  animating = false;
  emptyArray();
  resetParameters();
  finishing = false;
  animating = true;
} //_CODE_:Sorting_Algorithms:565240:

public void dropList1_click2(GDropList source, GEvent event) { //_CODE_:swappingChoice:324337:
  println("dropList1 - GDropList >> GEvent." + event + " @ " + millis());
  choiceSwap = swappingChoice.getSelectedText();
  resetParameters();
} //_CODE_:swappingChoice:324337:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:763730:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  animating = false;
  emptyArray();
  resetParameters();
  finishing = false;
  animating = true;
} //_CODE_:button1:763730:

public void custom_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:custom_slider1:951565:
  println("custom_slider1 - GCustomSlider >> GEvent." + event + " @ " + millis());
  animating = false;
  emptyArray();
  n = custom_slider1.getValueI();

  resetParameters();
  finishing = false;
  animating = true;
} //_CODE_:custom_slider1:951565:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 450, 250, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  speedSlider = new GCustomSlider(window1, 19, 47, 100, 60, "grey_blue");
  speedSlider.setShowValue(true);
  speedSlider.setLimits(3, 1, 5);
  speedSlider.setNbrTicks(3);
  speedSlider.setStickToTicks(true);
  speedSlider.setShowTicks(true);
  speedSlider.setNumberFormat(G4P.INTEGER, 0);
  speedSlider.setOpaque(false);
  speedSlider.addEventHandler(this, "frameSpeed_Slider");
  textfield1 = new GTextField(window1, 1543, 205, 60, 22, G4P.SCROLLBARS_NONE);
  textfield1.setText("Speed (1-5)");
  textfield1.setOpaque(true);
  textfield1.addEventHandler(this, "textfield1_change1");
  label1 = new GLabel(window1, 20, 20, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Speed (1-3)");
  label1.setOpaque(false);
  togGroup6 = new GToggleGroup();
  Sorting_Algorithms = new GDropList(window1, 137, 17, 150, 100, 4, 10);
  Sorting_Algorithms.setItems(loadStrings("list_565240"), 0);
  Sorting_Algorithms.addEventHandler(this, "dropList1_click1");
  swappingChoice = new GDropList(window1, 312, 15, 120, 90, 2, 10);
  swappingChoice.setItems(loadStrings("list_324337"), 0);
  swappingChoice.addEventHandler(this, "dropList1_click2");
  button1 = new GButton(window1, 350, 190, 80, 30);
  button1.setText("Reset");
  button1.addEventHandler(this, "button1_click1");
  label2 = new GLabel(window1, 23, 120, 80, 40);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Number of Cards");
  label2.setOpaque(false);
  custom_slider1 = new GCustomSlider(window1, 21, 177, 300, 60, "grey_blue");
  custom_slider1.setShowValue(true);
  custom_slider1.setShowLimits(true);
  custom_slider1.setLimits(15, 5, 15);
  custom_slider1.setNbrTicks(15);
  custom_slider1.setStickToTicks(true);
  custom_slider1.setShowTicks(true);
  custom_slider1.setNumberFormat(G4P.INTEGER, 0);
  custom_slider1.setOpaque(false);
  custom_slider1.addEventHandler(this, "custom_slider1_change1");
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GCustomSlider speedSlider; 
GTextField textfield1; 
GLabel label1; 
GToggleGroup togGroup6; 
GDropList Sorting_Algorithms; 
GDropList swappingChoice; 
GButton button1; 
GLabel label2; 
GCustomSlider custom_slider1; 
